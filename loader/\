import typing


def parse_track(file_handler: typing.BinaryIO):
    """TODO: Docstring for parse_track.

    :file_handler: typing.B: TODO
    :returns: TODO

    """
    assert 'MTrk' == file_handler.read(4).decode('ascii'), 'header magic string is incorrect'
    track_length = int.from_bytes(file_handler.read(4), byteorder='big')
    track_code = file_handler.read(4)
    print(track_code)

def parse_header(file_handler: typing.BinaryIO):
    """Function which handles converting bytes to values.
    :returns: TODO

    """
    assert 'MThd' == file_handler.read(4).decode('ascii'), 'header magic string is incorrect'
    assert 6 == int.from_bytes(file_handler.read(4), byteorder='big'), 'header "length" is incorrect'
    format = int.from_bytes(file_handler.read(2), byteorder='big')
    number_of_tracks = int.from_bytes(file_handler.read(2), byteorder='big')
    if format == 0:
        assert number_of_tracks == 1, 'Format 0 files should only have a single track'
    division = int.from_bytes(file_handler.read(2), byteorder='big')
    division_type = (division & 1<<15)
    assert division_type in [0, 1], 'File contains an invalid division in the header'
    delta_time = 0
    if division_type == 0:
        delta_time = (division & (1<<14) - 1)
    else:
        raise TypeError('SMTPE delta times not yet supported')
    return {'format' : format, 'number_of_tracks': number_of_tracks, 'delta_time': delta_time}


def main(file_path):
    """TODO: Docstring for main.

    :file_path: TODO
    :returns: TODO

    """
    count = 0
    with open(file_path, "rb") as file_handler:
        header = parse_header(file_handler)
        print(header)
        track = parse_track(file_handler)


if __name__ == "__main__":
    file = '/media/mark/Data/music/lmd_full/0/00000ec8a66b6bd2ef809b0443eeae41.mid'
    main(file)
